# Compatible GitLab version 16.2+
stages:
  - build
  - deploy
  - postdeploy

variables:
  # Dry run is for builds-only mode, no uploading/deploying/notifying, helpful when experimenting with pipelines
  CFX_DRY_RUN: 'false'
  CFX_CLONE_ROOT: $CI_BUILDS_DIR\$CI_PROJECT_PATH_SLUG\$CI_COMMIT_REF_SLUG

workflow:
  rules:
    # never run pipelines for tags
    - if: $CI_COMMIT_TAG
      when: never
    # never run pipelines for MRs
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    # otherwise, always run pipelines
    - when: always

# โช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๐นJOB TEMPLATES๐นโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช

.base_build_windows:
  stage: build
  tags: [windows]
  variables:
    # archives are heavier this way, but much faster to pack/unpack
    FF_USE_FASTZIP: "true"
    CACHE_COMPRESSION_LEVEL: "fastest"
  cache:
    key: $CI_JOB_NAME--$CI_COMMIT_REF_SLUG

.base_build_server:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH && ($CI_COMMIT_BRANCH != 'beta' && $CI_COMMIT_BRANCH != 'production')
      when: always
    - when: never

.base_deploy_client:
  stage: deploy
  tags: [windows]
  cache:
    key: $CI_JOB_NAME--$CI_COMMIT_REF_SLUG
    paths:
      - .build-cache
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\$CFX_PRODUCT_NAME-deploy
  rules:
    - if: $CFX_TARGET == 'canary' && $CI_COMMIT_BRANCH == 'master'
      variables:
        CFX_ENV_NAME: canary
      when: on_success
    - if: $CFX_TARGET == 'beta' && $CI_COMMIT_BRANCH == 'beta'
      variables:
        CFX_ENV_NAME: beta
      when: on_success
    - if: $CFX_TARGET == 'production' && $CI_COMMIT_BRANCH == 'production'
      variables:
        CFX_ENV_NAME: production
      when: on_success
    - if: $CFX_TARGET == 'specific' && $CI_COMMIT_BRANCH !~ /^(master|beta|production)$/
      variables:
        CFX_ENV_NAME: specific/$CI_COMMIT_BRANCH
      when: manual
      allow_failure: true
    - when: never
  script:
    - ".\\code\\tools\\ci\\deploy_client.ps1"

.base_scrt_packages:
  stage: deploy
  tags: [windows]
  rules: 
    - if: $CI_COMMIT_BRANCH == 'master' && $CI_JOB_NAME =~ /^*server*/
      needs: ["Build server (windows)"]
      when: on_success
    - if: $CI_COMMIT_BRANCH == 'master' && $CI_JOB_NAME =~ /^*client*/
      needs: ["Build client: [fivem]"]
      when: on_success
    - when: never

# โช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธ๐นBUILD๐นโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช

Build client:
  extends: [.base_build_windows]
  script:
    - ".\\code\\tools\\ci\\build_client.ps1"
  artifacts:
    paths:
      - caches
      - ext/native-doc-gen/natives_cfx.json
    expire_in: 1 month
  cache:
    paths:
      # Build files (bin, build, etc.)
      - .build-cache
      - code/tools/build/prebuild_run.txt
      # IDL tool generated files
      - code/tools/idl/xpidl/__pycache__
      - code/tools/idl/xpidl/xpidllex.py
      - code/tools/idl/xpidl/xpidlyacc.py
      # IDL generated files to avoid large recompilations
      - code/client/citicore/fxcore.h
      - code/client/citicore/fxIBase.h
      - code/components/citizen-scripting-core/include/fxScripting.h
      # Launcher delay list
      - code/client/launcher/DelayList.h
      # Versioning files
      - code/shared/citversion.h
      - code/shared/launcher_version.h
      # native-doc-gen files
      - ext/native-doc-gen/node.exe
      # natives files
      - ext/natives/inp
      - ext/natives/out
      # ui files
      - ext/ui-build/data/.commit
      - ext/ui-build/data.zip
      - ext/ui-build/data_big.zip
      # Chromium tools precompiled python
      - vendor/chromium/**/*.pyc
      # V8 binaries
      - vendor/v8/**/*.dll
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\$CFX_PRODUCT_NAME
  tags:
    - release_$CFX_PRODUCT_NAME
    - windows
    - vs2022
  parallel:
    matrix:
      - CFX_PRODUCT_NAME: [fivem, redm]

Build SDK:
  stage: build
  tags:
    - release_fivem
    - windows
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\fivem-sdk
  artifacts:
    paths:
      - caches
    expire_in: 1 month
  cache:
    key: $CI_JOB_NAME--$CI_COMMIT_REF_SLUG
    paths:
      - caches
  script:
    - ".\\code\\tools\\ci\\build_sdk.ps1"

Build server (windows):
  extends: [.base_build_windows, .base_build_server]
  tags:
    - release_fxserver
    - windows
    - vs2022
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\$CFX_PRODUCT_NAME
    CFX_PRODUCT_NAME: fxserver
  script:
    - ".\\code\\tools\\ci\\build_server_windows.ps1"
  artifacts:
    paths:
      - out/server.zip
      - out/server.7z
    expire_in: 1 month
  cache:
    untracked: true

Build server (linux proot):
  extends: [.base_build_server]
  tags: [linux]
  image: mcr.microsoft.com/dotnet/sdk:6.0-alpine3.19
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    GIT_SUBMODULE_DEPTH: 3
    # workaround gitlab-ci-multi-runner#2148
    GIT_SSL_CAPATH: /etc/ssl/certs/
    DOCKER_TLS_CERTDIR: ""
  script: 
    - sh code/tools/ci/build_server_proot.sh
  artifacts:
    paths:
      - fx.tar.xz
    expire_in: 1 month

# โช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๐นDEPLOY๐นโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช

Deploy FiveM:
  extends: .base_deploy_client
  environment:
    name: $CFX_ENV_NAME
  variables:
    CFX_PRODUCT_NAME: fivem
  needs:
    - "Build client: [fivem]"
    - Build SDK
  parallel:
    matrix:
      - CFX_TARGET: [canary, beta, production, specific]

Deploy RedM:
  extends: .base_deploy_client
  environment:
    name: $CFX_ENV_NAME
  variables:
    CFX_PRODUCT_NAME: redm
  needs:
    - "Build client: [redm]"
  parallel:
    matrix:
      - CFX_TARGET: [canary, beta, production, specific]


# โช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธ๐นSCRIPT RUNTIME PACKAGES๐นโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช

typings server:
  extends: .base_scrt_packages
  tags: [linux]  # Overriden
  image: node:alpine
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    GIT_SUBMODULE_DEPTH: 3
    # workaround gitlab-ci-multi-runner#2148
    GIT_SSL_CAPATH: /etc/ssl/certs/
  script:
    - sh ext/typings/server/build.sh
    
typings client:
  extends: .base_scrt_packages
  script:
    - "cmd /c ext\\typings\\client\\build.bat"
    
nuget:
  extends: .base_scrt_packages
  script:
    - "cmd /c ext\\nuget\\$CFX_TARGET\\build.bat"
  parallel:
    matrix:
      - CFX_TARGET: [client, server]


# โช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธ๐นREVIEWS UPLOAD๐นโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธโช๏ธ

Upload review:
  stage: postdeploy
  tags: [windows]
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(master|beta|production)$/ && $CFX_PRODUCT_NAME == 'fivem'
      needs: ["Build client: [fivem]"]
      when: on_success
    - if: $CI_COMMIT_BRANCH =~ /^(master|beta|production)$/ && $CFX_PRODUCT_NAME == 'redm'
      needs: ["Build client: [redm]"]
      when: on_success
    - when: never
  variables:
    GIT_CLONE_PATH: $CFX_CLONE_ROOT\$CFX_PRODUCT_NAME-review
  script:
    - ".\\code\\tools\\ci\\upload_review.ps1"
  parallel:
    matrix:
      - CFX_PRODUCT_NAME: [fivem, redm]
